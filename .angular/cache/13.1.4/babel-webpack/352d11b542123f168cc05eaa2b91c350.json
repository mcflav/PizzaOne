{"ast":null,"code":"import { User } from '../models/user.model';\nimport { catchError, tap } from 'rxjs/operators';\nimport { throwError, BehaviorSubject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"../services/users.services\";\nimport * as i3 from \"../services/orders.services\";\nimport * as i4 from \"@angular/router\";\nexport let DataStorageServices = /*#__PURE__*/(() => {\n  class DataStorageServices {\n    constructor(http, usersService, orderService, router) {\n      this.http = http;\n      this.usersService = usersService;\n      this.orderService = orderService;\n      this.router = router;\n      this.user = new BehaviorSubject(null);\n      this.elapsedTime = 86400;\n      this.timeInSeconds = 1000;\n      this.orders = [];\n      this._expirationDate = new Date(new Date().getTime() + this.elapsedTime * this.timeInSeconds);\n    }\n\n    storeUser(user) {\n      const body = user;\n      return this.http.post('https://pacific-cove-41582.herokuapp.com/api/v1/users', body).pipe(catchError(this.handleError));\n    }\n\n    fetchUsers() {\n      return this.http.get('https://pacific-cove-41582.herokuapp.com/api/v1/users').pipe(catchError(this.handleError));\n    }\n\n    storeOrder(order) {\n      const body = order;\n      console.log(body);\n      return this.http.post('https://pacific-cove-41582.herokuapp.com/api/v1/orders', body).pipe(catchError(this.handleError));\n    }\n\n    fetchOrders(userId) {\n      console.log(userId);\n      return this.http.post('https://pacific-cove-41582.herokuapp.com/api/v1/orders/getOrder', {\n        user: userId\n      }).pipe(catchError(this.handleError));\n    }\n\n    validateUser(user) {\n      const body = user;\n      return this.http.post('https://pacific-cove-41582.herokuapp.com/api/v1/authentication', body).pipe(catchError(this.authenticationError), tap(resData => {\n        this.handleAuthentication(resData.auth, resData.token);\n      }));\n    }\n\n    autoLogin() {\n      const userData = JSON.parse(localStorage.getItem('userData'));\n\n      if (!userData) {\n        console.log(\"no Token!\");\n        return;\n      }\n\n      const loadedUser = new User(userData.auth, userData._token, this._expirationDate);\n      console.log(userData._token);\n\n      if (loadedUser.token) {\n        this.user.next(loadedUser);\n        const expirationDuration = new Date(this._expirationDate).getTime() - new Date().getTime();\n      }\n    }\n\n    autoLogout(expirationDuration) {\n      this.tokenExpirationTimer = setTimeout(() => {\n        this.logOut();\n      }, expirationDuration);\n    }\n\n    logOut() {\n      this.user.next(null);\n      this.router.navigate(['/login']);\n      localStorage.removeItem('userData');\n\n      if (this.tokenExpirationTimer) {\n        clearTimeout(this.tokenExpirationTimer);\n      }\n\n      this.tokenExpirationTimer = null;\n    }\n\n    handleAuthentication(auth, token) {\n      const expirationDate = new Date(new Date().getTime() + this.elapsedTime * this.timeInSeconds);\n      const user = new User(auth, token, expirationDate);\n      this.user.next(user);\n      this.autoLogout(this.elapsedTime * this.timeInSeconds);\n      localStorage.setItem('userData', JSON.stringify(user));\n    }\n\n    handleError(errorRes) {\n      const errorMessage = errorRes.error;\n      return throwError(errorMessage);\n    }\n\n    authenticationError(errorRes) {\n      let errorMessage;\n\n      if (errorRes.status === 400 || errorRes.status === 401 && errorRes.error.token !== null || errorRes.status === 401 && errorRes.error.token === null) {\n        errorMessage = \"Invalid Username or Password.\";\n      }\n\n      return throwError(errorMessage);\n    }\n\n  }\n\n  DataStorageServices.ɵfac = function DataStorageServices_Factory(t) {\n    return new (t || DataStorageServices)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.UsersServices), i0.ɵɵinject(i3.OrdersServices), i0.ɵɵinject(i4.Router));\n  };\n\n  DataStorageServices.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: DataStorageServices,\n    factory: DataStorageServices.ɵfac,\n    providedIn: 'root'\n  });\n  return DataStorageServices;\n})();","map":null,"metadata":{},"sourceType":"module"}